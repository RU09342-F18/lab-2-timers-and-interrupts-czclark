
// Had to make a new file for button based delay because of interrupt conflicts

void ButtonBasedDelay(void) 
{
       P1OUT = 0; // Sets all output register bits to 0

       P1SEL &= (~BIT0 & ~BIT3); // Sets P1.0 and P1.3 as GPIO


       P1DIR |= BIT0; // configure P1.0 as output
       P1DIR &= ~BIT3; // configure P1.3(button) as input

       P1REN |= BIT3;  // Enable Pullup/down Resistor for SW1
       P1OUT |= BIT3;  // Sets resistor to pull up

       CCTL0 = CCIE; // Capture Compare - Interrupt Enable

       P1IE |= BIT3;   // Enable interrupt for button (P1.3)
       P1IES |= BIT3;  // P1.3 Hi/Lo edge
       P1IFG &= ~BIT3; // Clears interrupt flag for button press


       BCSCTL3 = LFXT1S_2; // Needed for ACLK to function
                           // Connects ACLK to internal oscillator

       TA0CTL = TASSEL_1 + MC_1 + ID_0;  // Timer is set in up mode (ACLK)

       TACCR0 = (32768)/10; // Sets Timer frequency to 10Hz


       __bis_SR_register(CPUOFF + GIE); // Enter LPM0

       while(1)
       {}
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void) // If interrupt, button press, occurs ...
  {
     if(P1IES & BIT3)
       {
            P1IFG &= ~BIT3; // Clears button interrupt flag

            P1IES &= ~BIT3; // Sets button interrupt to Lo/High edge

            TA0CTL = TACLR; // Clears current Timer setup
            TA0CTL = TASSEL_1 + MC_2 + ID_0; // Sets timer to continuous mode
       }
     else
       {
            TA0CTL = TASSEL_1 + MC_0 +ID_0;
            P1IFG &= ~BIT3;
            TACCR0 = TA0R;   // Store time in TAR register to CCR
                             // TAR keeps track of clock pulses as timer runs

            P1IES |= BIT3; // Set button interrupt to High/Lo edge

            TA0CTL = TASSEL_1 + MC_1 + ID_0; // Set Timer back to "up mode"
       }
  }

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A0(void)
{
   P1OUT ^= BIT0;
}
